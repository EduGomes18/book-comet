{"ast":null,"code":"import _asyncToGenerator from \"/home/edu/www/book-comet/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nexport class LoginService {\n  constructor(http, toastr) {\n    this.http = http;\n    this.toastr = toastr;\n    this.baseApiUrl = environment.baseUrl;\n    this.apiUrl = `${this.baseApiUrl}auth`;\n  }\n\n  auth(user) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this.http.post(_this.apiUrl, user).toPromise().catch(err => {\n        var _a;\n\n        if ((_a = err === null || err === void 0 ? void 0 : err.error) === null || _a === void 0 ? void 0 : _a.message) _this.toastr.error(err.error.message);else _this.toastr.error('Error conecting with server, try again later.');\n      });\n      const json = JSON.stringify(response);\n      localStorage.setItem('user', json);\n      return response;\n    })();\n  }\n\n  IsLogged() {\n    return localStorage.getItem('user') != null;\n  }\n\n  userInfo() {\n    if (localStorage.getItem('user') !== null) {\n      const getUser = JSON.parse(localStorage.getItem('user') || '');\n      return getUser;\n    } else return null;\n  }\n\n}\n\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService));\n};\n\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/edu/www/book-comet/frontend/src/app/services/login.service.ts"],"names":["environment","i0","i1","i2","LoginService","constructor","http","toastr","baseApiUrl","baseUrl","apiUrl","auth","user","response","post","toPromise","catch","err","_a","error","message","json","JSON","stringify","localStorage","setItem","IsLogged","getItem","userInfo","getUser","parse","ɵfac","LoginService_Factory","t","ɵɵinject","HttpClient","ToastrService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,YAApB;AACA,OAAO,MAAMC,YAAN,CAAmB;AACtBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBR,WAAW,CAACS,OAA9B;AACA,SAAKC,MAAL,GAAe,GAAE,KAAKF,UAAW,MAAjC;AACH;;AACKG,EAAAA,IAAI,CAACC,IAAD,EAAO;AAAA;;AAAA;AACb,YAAMC,QAAQ,SAAS,KAAI,CAACP,IAAL,CAClBQ,IADkB,CACb,KAAI,CAACJ,MADQ,EACAE,IADA,EAElBG,SAFkB,GAGlBC,KAHkB,CAGXC,GAAD,IAAS;AAChB,YAAIC,EAAJ;;AACA,YAAI,CAACA,EAAE,GAAGD,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAACE,KAApD,MAA+D,IAA/D,IAAuED,EAAE,KAAK,KAAK,CAAnF,GAAuF,KAAK,CAA5F,GAAgGA,EAAE,CAACE,OAAvG,EACI,KAAI,CAACb,MAAL,CAAYY,KAAZ,CAAkBF,GAAG,CAACE,KAAJ,CAAUC,OAA5B,EADJ,KAGI,KAAI,CAACb,MAAL,CAAYY,KAAZ,CAAkB,+CAAlB;AACP,OATsB,CAAvB;AAUA,YAAME,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeV,QAAf,CAAb;AACAW,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BJ,IAA7B;AACA,aAAOR,QAAP;AAba;AAchB;;AACDa,EAAAA,QAAQ,GAAG;AACP,WAAOF,YAAY,CAACG,OAAb,CAAqB,MAArB,KAAgC,IAAvC;AACH;;AACDC,EAAAA,QAAQ,GAAG;AACP,QAAIJ,YAAY,CAACG,OAAb,CAAqB,MAArB,MAAiC,IAArC,EAA2C;AACvC,YAAME,OAAO,GAAGP,IAAI,CAACQ,KAAL,CAAWN,YAAY,CAACG,OAAb,CAAqB,MAArB,KAAgC,EAA3C,CAAhB;AACA,aAAOE,OAAP;AACH,KAHD,MAKI,OAAO,IAAP;AACP;;AAhCqB;;AAkC1BzB,YAAY,CAAC2B,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAI7B,YAAV,EAAwBH,EAAE,CAACiC,QAAH,CAAYhC,EAAE,CAACiC,UAAf,CAAxB,EAAoDlC,EAAE,CAACiC,QAAH,CAAY/B,EAAE,CAACiC,aAAf,CAApD,CAAP;AAA4F,CAAnJ;;AACAhC,YAAY,CAACiC,KAAb,GAAqB,aAAcpC,EAAE,CAACqC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEnC,YAAT;AAAuBoC,EAAAA,OAAO,EAAEpC,YAAY,CAAC2B,IAA7C;AAAmDU,EAAAA,UAAU,EAAE;AAA/D,CAAtB,CAAnC","sourcesContent":["import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nexport class LoginService {\n    constructor(http, toastr) {\n        this.http = http;\n        this.toastr = toastr;\n        this.baseApiUrl = environment.baseUrl;\n        this.apiUrl = `${this.baseApiUrl}auth`;\n    }\n    async auth(user) {\n        const response = await this.http\n            .post(this.apiUrl, user)\n            .toPromise()\n            .catch((err) => {\n            var _a;\n            if ((_a = err === null || err === void 0 ? void 0 : err.error) === null || _a === void 0 ? void 0 : _a.message)\n                this.toastr.error(err.error.message);\n            else\n                this.toastr.error('Error conecting with server, try again later.');\n        });\n        const json = JSON.stringify(response);\n        localStorage.setItem('user', json);\n        return response;\n    }\n    IsLogged() {\n        return localStorage.getItem('user') != null;\n    }\n    userInfo() {\n        if (localStorage.getItem('user') !== null) {\n            const getUser = JSON.parse(localStorage.getItem('user') || '');\n            return getUser;\n        }\n        else\n            return null;\n    }\n}\nLoginService.ɵfac = function LoginService_Factory(t) { return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService)); };\nLoginService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: LoginService, factory: LoginService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}