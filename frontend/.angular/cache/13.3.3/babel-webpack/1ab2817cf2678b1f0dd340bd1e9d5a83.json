{"ast":null,"code":"import _asyncToGenerator from \"/home/edu/www/book-comet/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nexport class RegisterService {\n  constructor(http, toastr) {\n    this.http = http;\n    this.toastr = toastr;\n    this.baseApiUrl = environment.baseUrl;\n    this.apiUrl = `${this.baseApiUrl}auth/register`;\n  }\n\n  register(user) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this.http.post(_this.apiUrl, user).toPromise().catch(err => {\n        if (err.error.message) _this.toastr.error(err.error.message);else _this.toastr.error(\"Error conecting with server, try again later.\");\n      });\n      localStorage.setItem('user', response);\n      return response;\n    })();\n  }\n\n}\n\nRegisterService.ɵfac = function RegisterService_Factory(t) {\n  return new (t || RegisterService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService));\n};\n\nRegisterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RegisterService,\n  factory: RegisterService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/edu/www/book-comet/frontend/src/app/services/register.service.ts"],"names":["environment","i0","i1","i2","RegisterService","constructor","http","toastr","baseApiUrl","baseUrl","apiUrl","register","user","response","post","toPromise","catch","err","error","message","localStorage","setItem","ɵfac","RegisterService_Factory","t","ɵɵinject","HttpClient","ToastrService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,YAApB;AACA,OAAO,MAAMC,eAAN,CAAsB;AACzBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBR,WAAW,CAACS,OAA9B;AACA,SAAKC,MAAL,GAAe,GAAE,KAAKF,UAAW,eAAjC;AACH;;AACKG,EAAAA,QAAQ,CAACC,IAAD,EAAO;AAAA;;AAAA;AACjB,YAAMC,QAAQ,SAAS,KAAI,CAACP,IAAL,CAAUQ,IAAV,CAAe,KAAI,CAACJ,MAApB,EAA4BE,IAA5B,EAAkCG,SAAlC,GAA8CC,KAA9C,CAAqDC,GAAD,IAAS;AAChF,YAAIA,GAAG,CAACC,KAAJ,CAAUC,OAAd,EACI,KAAI,CAACZ,MAAL,CAAYW,KAAZ,CAAkBD,GAAG,CAACC,KAAJ,CAAUC,OAA5B,EADJ,KAGI,KAAI,CAACZ,MAAL,CAAYW,KAAZ,CAAkB,+CAAlB;AACP,OALsB,CAAvB;AAMAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BR,QAA7B;AACA,aAAOA,QAAP;AARiB;AASpB;;AAhBwB;;AAkB7BT,eAAe,CAACkB,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAIpB,eAAV,EAA2BH,EAAE,CAACwB,QAAH,CAAYvB,EAAE,CAACwB,UAAf,CAA3B,EAAuDzB,EAAE,CAACwB,QAAH,CAAYtB,EAAE,CAACwB,aAAf,CAAvD,CAAP;AAA+F,CAA5J;;AACAvB,eAAe,CAACwB,KAAhB,GAAwB,aAAc3B,EAAE,CAAC4B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE1B,eAAT;AAA0B2B,EAAAA,OAAO,EAAE3B,eAAe,CAACkB,IAAnD;AAAyDU,EAAAA,UAAU,EAAE;AAArE,CAAtB,CAAtC","sourcesContent":["import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nexport class RegisterService {\n    constructor(http, toastr) {\n        this.http = http;\n        this.toastr = toastr;\n        this.baseApiUrl = environment.baseUrl;\n        this.apiUrl = `${this.baseApiUrl}auth/register`;\n    }\n    async register(user) {\n        const response = await this.http.post(this.apiUrl, user).toPromise().catch((err) => {\n            if (err.error.message)\n                this.toastr.error(err.error.message);\n            else\n                this.toastr.error(\"Error conecting with server, try again later.\");\n        });\n        localStorage.setItem('user', response);\n        return response;\n    }\n}\nRegisterService.ɵfac = function RegisterService_Factory(t) { return new (t || RegisterService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService)); };\nRegisterService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RegisterService, factory: RegisterService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}